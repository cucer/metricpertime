{"version":3,"sources":["utils/methods.js","components/Main.js","utils/client.js","App.js","index.js"],"names":["groupByFormat","data","dateFormat","_","groupBy","item","time","moment","format","formatDate","created_time","avgPostLenPerMonth","months","newArray","Object","keys","map","group","result","reduce","sum","message","length","push","key","Main","useState","posts","setPosts","metricData","setMetricData","method","setMethod","isLoading","setIsLoading","getData","token","a","i","allData","newArr","fetch","then","response","json","catch","error","console","index","useEffect","headers","body","JSON","stringify","client_id","email","name","sl_token","getToken","handleAvgPostLenPerMonth","e","preventDefault","handleDownload","blob","Blob","type","URL","createObjectURL","href","link","document","createElement","download","appendChild","click","removeChild","onClick","className","Math","max","apply","longestPostPerMonth","weeks","totalPostsByWeek","monthUsers","users","id","avgPostsPerUserPerMonth","d","round","App","ReactGa","initialize","pageview","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.17a2e149.chunk.js","sourcesContent":["import * as moment from 'moment'\r\nimport _ from 'lodash'\r\nimport { CLIENT_ID, EMAIL, NAME } from '../utils/client'\r\n\r\nexport const getHeaders = () => {\r\n  var headers = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n      client_id: CLIENT_ID,\r\n      email: EMAIL,\r\n      name: NAME,\r\n    }),\r\n  }\r\n  return headers\r\n}\r\n\r\nexport const formatDate = (time, dateFormat) => moment(time).format(dateFormat)\r\n\r\nexport const groupByFormat = (data, dateFormat) =>\r\n  _.groupBy(data, (item) => formatDate(item.created_time, dateFormat))\r\n\r\nexport const avgPostLenPerMonth = (data) => {\r\n  const months = groupByFormat(data, 'MM/YYYY')\r\n  const newArray = []\r\n  Object.keys(months).map((group) => {\r\n    const result =\r\n      months[group].reduce((sum, item) => sum + item.message.length, 0) /\r\n      months[group].length\r\n    newArray.push({ key: group, result })\r\n    return result\r\n  })\r\n  return newArray\r\n}\r\n\r\nexport const totalPostsByWeek = (data) => {\r\n  const weeks = groupByFormat(data, 'W/YYYY')\r\n  const newArray = []\r\n  Object.keys(weeks).map((group) => {\r\n    const result = weeks[group].length\r\n    newArray.push({ key: group, result })\r\n    return result\r\n  })\r\n  return newArray\r\n}\r\n\r\nexport const longestPostPerMonth = (data) => {\r\n  const months = groupByFormat(data, 'MM/YYYY')\r\n  const newArray = []\r\n  Object.keys(months).map((group) => {\r\n    // Method 1\r\n    const result = Math.max.apply(\r\n      null,\r\n      months[group].map((a) => a.message.length)\r\n    )\r\n    // Method 2\r\n    newArray.push({ key: group, result })\r\n    return result\r\n  })\r\n  return newArray\r\n}\r\n\r\nexport const avgPostsPerUserPerMonth = (data) => {\r\n  const months = groupByFormat(data, 'MM/YYYY')\r\n  const newArray = []\r\n  Object.keys(months).map((group) => {\r\n    const monthUsers = _.groupBy(months[group], 'from_id')\r\n    const users = Object.keys(monthUsers).map((id) => monthUsers[id].length)\r\n    const result = users.reduce((sum, item) => sum + item, 0) / users.length\r\n    newArray.push({ key: group, result })\r\n    return result\r\n  })\r\n  return newArray\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport {\r\n  getHeaders,\r\n  avgPostLenPerMonth,\r\n  totalPostsByWeek,\r\n  longestPostPerMonth,\r\n  avgPostsPerUserPerMonth,\r\n} from '../utils/methods'\r\n\r\nfunction Main() {\r\n  const [posts, setPosts] = useState([])\r\n  const [metricData, setMetricData] = useState([])\r\n  const [method, setMethod] = useState()\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const regUrl = 'https://api.supermetrics.com/assignment/register'\r\n  const postUrl = 'https://api.supermetrics.com/assignment/posts'\r\n\r\n  const getData = async (token) => {\r\n    let i = 1\r\n    const allData = []\r\n    const newArr = []\r\n\r\n    while (i <= 10) {\r\n      allData.push(\r\n        await fetch(`${postUrl}?sl_token=${token}&page=${i}`)\r\n          .then((response) => response.json())\r\n          .then((fetch) => {\r\n            return fetch.data.posts\r\n          })\r\n          .catch((error) => {\r\n            setIsLoading(false)\r\n            console.error(error)\r\n          })\r\n      )\r\n      i += 1\r\n    }\r\n\r\n    for (var index = 0; index < allData.length; index++) {\r\n      allData[index].map((a) => newArr.push(a))\r\n    }\r\n    setIsLoading(false)\r\n    setPosts(newArr)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getToken = async () => {\r\n      setIsLoading(true)\r\n      await fetch(regUrl, getHeaders())\r\n        .then((response) => response.json())\r\n        .then((token) => {\r\n          getData(token.data.sl_token)\r\n        })\r\n        .catch((error) => {\r\n          setIsLoading(false)\r\n          console.error(error)\r\n        })\r\n    }\r\n    getToken()\r\n  }, [])\r\n\r\n  const handleAvgPostLenPerMonth = async (e) => {\r\n    e.preventDefault()\r\n    setMetricData(avgPostLenPerMonth(posts))\r\n    setMethod(1)\r\n  }\r\n\r\n  const handleLongestPostPerMonth = (e) => {\r\n    e.preventDefault()\r\n    setMetricData(longestPostPerMonth(posts))\r\n    setMethod(2)\r\n  }\r\n\r\n  const handleTotalPostsByWeek = (e) => {\r\n    e.preventDefault()\r\n    setMetricData(totalPostsByWeek(posts))\r\n    setMethod(3)\r\n  }\r\n\r\n  const handleAvgPostsPerUserPerMonth = (e) => {\r\n    e.preventDefault()\r\n    setMetricData(avgPostsPerUserPerMonth(posts))\r\n    setMethod(4)\r\n  }\r\n\r\n  const handleDownload = async (e) => {\r\n    e.preventDefault()\r\n    const blob = new Blob([JSON.stringify(metricData)], {\r\n      type: 'application/json',\r\n    })\r\n    const href = await URL.createObjectURL(blob)\r\n    const link = document.createElement('a')\r\n    link.href = href\r\n    link.download = 'data.json'\r\n    document.body.appendChild(link)\r\n    link.click()\r\n    document.body.removeChild(link)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <div>\r\n          <h1>Loading Data. Please Wait!</h1>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1>Metrics</h1>\r\n          <button onClick={handleAvgPostLenPerMonth} className='button'>\r\n            avgPostLenPerMonth\r\n          </button>\r\n          <button onClick={handleLongestPostPerMonth} className='button'>\r\n            longestPostPerMonth\r\n          </button>\r\n          <button onClick={handleTotalPostsByWeek} className='button'>\r\n            totalPostsByWeek\r\n          </button>\r\n          <button onClick={handleAvgPostsPerUserPerMonth} className='button'>\r\n            avgPostsPerUserPerMonth\r\n          </button>\r\n\r\n          <div className='main'>\r\n            {metricData.map((d, i) => {\r\n              return (\r\n                <div key={i}>\r\n                  <span>\r\n                    {method === 1 || method === 2 || method === 4\r\n                      ? 'Month: '\r\n                      : 'Week: '}\r\n                    {d.key}\r\n                  </span>\r\n                  {' - '}\r\n                  <span>\r\n                    {method === 1\r\n                      ? 'Avg: '\r\n                      : method === 2\r\n                      ? 'Longest: '\r\n                      : method === 3\r\n                      ? 'Total: '\r\n                      : 'Avg: '}\r\n                    {Math.round(d.result * 100) / 100}\r\n                  </span>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n          <div>\r\n            {metricData && metricData.length > 0 ? (\r\n              <button onClick={handleDownload} className='button'>\r\n                Download Metrics\r\n              </button>\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Main\r\n","export const CLIENT_ID = 'ju16a6m81mhid5ue1z3v2g0uh' //process.env.REACT_APP_CLIENT_ID\r\nexport const EMAIL = 'test@test.com' //process.env.REACT_APP_CLIENT_EMAIL\r\nexport const NAME = 'John Doe' //process.env.REACT_APP_CLIENT_NAME\r\n","import React, { useEffect } from 'react'\nimport ReactGa from 'react-ga'\nimport './css/App.css'\nimport Main from './components/Main'\n\nfunction App() {\n  useEffect(() => {\n    ReactGa.initialize('UA-62711254-5')\n    ReactGa.pageview('/metrics')\n  }, [])\n\n  return (\n    <div className='app'>\n      <Main />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './css/index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}